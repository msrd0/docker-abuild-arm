# -*- mode: Shell-script; eval: (setq indent-tabs-mode 't); eval: (setq tab-width 4) -*-
# Contributor: Rasmus Thomsen <oss@cogitri.dev>
# Contributor: Jakub Jirutka <jakub@jirutka.cz>
# Contributor: Shiz <hi@shiz.me>
# Contributor: Jeizsm <jeizsm@gmail.com>
# Contributor: Ariadne Conill <ariadne@dereferenced.org>
# Contributor: psykose <alice@ayaya.dev>
# Maintainer: Dominic Meiser <git@msrd0.de>
pkgname=rust
pkgver=1.80.1
_llvmver=16
[ "$ALPINE_VERSION" == "3.19" ] && _llvmver=17
[ "$ALPINE_VERSION" == "3.20" ] && _llvmver=18
_bootver=1.79.0
pkgrel=0
pkgdesc="The Rust Programming Language"
url="https://www.rust-lang.org/"
arch="x86_64"
license="Apache-2.0 AND MIT"

_ctarget=x86_64
case "$CTARGET" in
	aarch64-*)
		_ctarget=aarch64
		;;
	armv7-*)
		_ctarget=armv7
		;;
	armv6-*)
		_ctarget=armhf
		;;
	armhf-*)
		_ctarget=armhf
		;;
esac

# gcc is needed at runtime just for linking. Someday rustc might invoke
# the linker directly, and then we'll only need binutils.
# See: https://github.com/rust-lang/rust/issues/11937
depends="$pkgname-stdlib=$pkgver-r$pkgrel gcc musl-dev"

# * Rust is self-hosted, so you need rustc (and cargo) to build rustc...
#   The last revision of this abuild that does not depend on itself (uses
#   prebuilt rustc and cargo) is 2e6769eb39eaff3029d8298fc02856623c563cd8.
# * Don't add libgit2-dev into make dependencies. There's no compatibility
#   guarantees between libgit2-sys and arbitrary system libgit2 versions;
#   when system libgit2 is upgraded to a new minor version, it may break
#   cargo and since we need cargo to rebuild cargo... this already happened
#   several times. For this reason we build cargo with vendored libgit2.
makedepends_build="
	gcc-$_ctarget
	!libgit2-dev
	bash
	coreutils
	curl-dev
	file
	libssh2-dev
	llvm$_llvmver-dev
	llvm$_llvmver-test-utils
	openssl-dev
	patchelf
	python3
	tar
	xz-dev
	zlib-dev
"
makedepends_host="
	curl-dev
	libssh2-dev
	llvm$_llvmver-dev
	openssl-dev
	scudo-malloc
	zlib-dev
"

# XXX: This is a hack to allow this abuild to depend on itself. Adding "rust"
# to makedepends would not work, because abuild implicitly removes $pkgname
# and $subpackages from the abuild's dependencies.
provides="rust-bootstrap=$pkgver-r$pkgrel"
# This is needed for -src that contains some testing binaries.
# Disable tests for now, while we use foreign triplets
options="!archcheck !check"

subpackages="
	$pkgname-dbg
	$pkgname-stdlib
	$pkgname-stdlib-$_ctarget:_stdlib_arm
	$pkgname-gdb::noarch
	$pkgname-lldb::noarch
	$pkgname-doc
	$pkgname-src::noarch
	cargo
	cargo-bash-completions:_cargo_bashcomp:noarch
	cargo-zsh-completion:_cargo_zshcomp:noarch
	cargo-doc:_cargo_doc:noarch
	"
source="
	https://static.rust-lang.org/dist/rust-$_bootver-x86_64-unknown-linux-musl.tar.gz
	https://static.rust-lang.org/dist/rustc-$pkgver-src.tar.gz
	alpine-move-py-scripts-to-share.patch
	alpine-target.patch
	do-not-install-libunwind-source.patch
	gcc-eh-libunwind.patch
	install-template-shebang.patch
	musl-fix-linux_musl_base.patch
	need-rpath.patch
	need-ssp_nonshared.patch
	9950-alpine-arm-target-linker.patch
	check-rustc
	"
builddir="$srcdir/rustc-$pkgver-src"

# We are building with rust-lang's musl toolchain for our x86_64 and our arm target
_build="x86_64-unknown-linux-musl"
_target="x86_64-alpine-linux-musl"
_arm="$CTARGET"

_rlibdir="usr/lib/rustlib/$_target/lib"
_sharedir="usr/share/rust"

ldpath="/$_rlibdir"

export OPENSSL_NO_VENDOR=1
export RUST_BACKTRACE=1
export BOOTSTRAP_SKIP_TARGET_SANITY=1

# absolutely do not set these here, rust "knows" what it's doing
unset CARGO_PROFILE_RELEASE_LTO
unset CARGO_PROFILE_RELEASE_OPT_LEVEL
unset CARGO_PROFILE_RELEASE_PANIC
unset CARGO_PROFILE_RELEASE_CODEGEN_UNITS

# rust checksums files in vendor/, but we have to patch a few files...
_clear_vendor_checksums() {
	sed -i 's/\("files":{\)[^}]*/\1/' vendor/$1/.cargo-checksum.json
}

build() {
	if [ "$_build" != "$_target" ]; then
		export PKG_CONFIG_ALLOW_CROSS=1
	fi

	mkdir "$srcdir/local-rust-root"
	"$srcdir/rust-$_bootver-x86_64-unknown-linux-musl/install.sh" --destdir="$srcdir/local-rust-root" --prefix=/usr

	./configure \
		--build="$_build" \
		--host="$_target" \
		--target="$_target,$_arm" \
		--prefix="/usr" \
		--release-channel="stable" \
		--enable-local-rust \
		--local-rust-root="$srcdir/local-rust-root/usr" \
		--llvm-root="/usr/lib/llvm$_llvmver" \
		--disable-docs \
		--enable-extended \
		--tools="cargo,clippy,rustdoc,rustfmt,src" \
		--enable-llvm-link-shared \
		--enable-option-checking \
		--enable-profiler \
		--enable-locked-deps \
		--enable-vendor \
		--dist-compression-formats=gz \
		--python="python3" \
		--set="rust.musl-root=/usr" \
		--set="rust.backtrace-on-ice=true" \
		--set="rust.codegen-units=1" \
		--set="rust.codegen-units-std=1" \
		--set="rust.deny-warnings=false" \
		--set="rust.parallel-compiler=false" \
		--set="rust.remap-debuginfo=true" \
		--set="rust.description=Alpine Linux $pkgver-r$pkgrel" \
		--set="target.$_target.llvm-config=/usr/lib/llvm$_llvmver/bin/llvm-config" \
		--set="target.$_target.musl-root=/usr" \
		--set="target.$_target.crt-static=false" \
		--set="target.$_target.cc=${CROSS_COMPILE}gcc" \
		--set="target.$_target.cxx=${CROSS_COMPILE}c++" \
		--set="target.$_target.ar=${CROSS_COMPILE}ar" \
		--set="target.$_target.linker=${CROSS_COMPILE}gcc" \
		--set="target.$_arm.llvm-config=/usr/lib/llvm$_llvmver/bin/llvm-config" \
		--set="target.$_arm.musl-root=$CBUILDROOT/usr" \
		--set="target.$_arm.crt-static=false" \
		--set="target.$_arm.cc=$_arm-gcc" \
		--set="target.$_arm.cxx=$_arm-c++" \
		--set="target.$_arm.ar=$_arm-ar" \
		--set="target.$_arm.linker=$_arm-gcc" \
		--set="target.$_build.musl-root=/usr" \
		--set="target.$_build.crt-static=false" \
		--set="target.$_build.cc=gcc" \
		--set="target.$_build.cxx=c++" \
		--set="target.$_build.ar=ar" \
		--set="target.$_build.linker=gcc"
	
	_jobs=
	[ -n "$JOBS" ] && _jobs="--jobs $JOBS"
	python3 ./x.py dist $_jobs
}

check() {
	# At this moment lib/rustlib/$_target/lib does not contain a complete
	# copy of the .so libs from lib (they will be copied there during
	# 'x.py install'). Thus we must set LD_LIBRARY_PATH for tests to work.
	# This is related to change-rpath-to-rustlib.patch.
	export LD_LIBRARY_PATH="$builddir/build/$_target/stage2/lib"

	"$srcdir"/check-rustc "$builddir"/build/$_target/stage2/bin/rustc

# XXX: There's some problem with these tests, we will figure it out later.
#	make check \
#		LD_LIBRARY_PATH="$_stage0dir/lib" \
#		VERBOSE=1

	msg "Running tests for cargo..."
	CFG_DISABLE_CROSS_TESTS=1 $_python ./x.py test --no-fail-fast src/tools/cargo

	unset LD_LIBRARY_PATH
}

package() {
	mkdir -p "$pkgdir/usr"

	cd "$pkgdir"

	tar xf "$builddir"/build/dist/rustc-$pkgver-$_target.tar.gz \
		-C "$pkgdir/usr" --strip-components=2 --exclude=manifest.in --no-same-owner
	tar xf "$builddir"/build/dist/rust-std-$pkgver-$_target.tar.gz \
		-C "$pkgdir/usr" --strip-components=2 --exclude=manifest.in --no-same-owner
	tar xf "$builddir"/build/dist/rustc-dev-$pkgver-$_target.tar.gz \
		-C "$pkgdir/usr" --strip-components=2 --exclude=manifest.in --no-same-owner
	tar xf "$builddir"/build/dist/rust-src-$pkgver.tar.gz \
		-C "$pkgdir/usr" --strip-components=2 --exclude=manifest.in --no-same-owner
	tar xf "$builddir"/build/dist/cargo-$pkgver-$_target.tar.gz \
		-C "$pkgdir/usr" --strip-components=2 --exclude=manifest.in --no-same-owner
	tar xf "$builddir"/build/dist/clippy-$pkgver-$_target.tar.gz \
		-C "$pkgdir/usr" --strip-components=2 --exclude=manifest.in --no-same-owner
	tar xf "$builddir"/build/dist/rustfmt-$pkgver-$_target.tar.gz \
		-C "$pkgdir/usr" --strip-components=2 --exclude=manifest.in --no-same-owner

	# We don't want to include stuff like rust-llvm-* tools, as we will use the
	# system tools.
	rm -f usr/lib/rustlib/"$_target"/bin/rust-llvm-*

	# Python scripts are noarch, so move them to /usr/share.
	# Requires move-py-scripts-to-share.patch to be applied.
	_mv usr/lib/rustlib/etc/*.py $_sharedir/etc/
	rmdir -p usr/lib/rustlib/etc 2>/dev/null || true

	_mv usr/etc/bash_completion.d/cargo usr/share/bash-completion/completions/
	rmdir -p usr/etc/bash_completion.d 2>/dev/null || true

	_mv usr/lib/rustlib/src/rust usr/src/
	ln -s ../../../src/rust usr/lib/rustlib/src/rust
	mv usr/lib/rustlib/rustc-src/rust usr/src/rustc
	ln -s ../../../src/rustc usr/lib/rustlib/rustc-src/rust

	# Remove some clutter.
	cd "$pkgdir"/usr/lib/rustlib
	rm -f components install.log manifest-* rust-installer-version uninstall.sh
	if [ "$_build" != "$_target" ]; then
		rm -rf "$pkgdir"/usr/lib/rustlib/$_build
	fi

	# for some reason the tar archive gets some root-only files for rlibs
	find "$pkgdir"/usr/lib/rustlib -type f -perm -600 -exec chmod 644 {} \+
	find "$pkgdir"/usr/lib/rustlib -type f -perm -700 -exec chmod 755 {} \+

	# link scudo to tools by default
	# this is roughly 20+% faster with no downside except slightly higher
	# memory use, but this is a compiler that already uses a ton of memory
	patchelf --add-needed libscudo.so \
		"$pkgdir"/usr/bin/cargo \
		"$pkgdir"/usr/bin/rustc \
		"$pkgdir"/usr/bin/rustdoc
}

stdlib() {
	pkgdesc="Standard library for Rust (static rlibs)"
	depends=

	amove $_rlibdir/*.rlib
}

_stdlib_arm() {
	pkgdesc="Standard library for Rust ($_ctarget target)"
	depends="gcc-$_ctarget"
	
	mkdir -p "$subpkgdir/usr"
	tar xf "$builddir"/build/dist/rust-std-${pkgver}-${_arm}.tar.gz \
		-C "$subpkgdir/usr" --strip-components=2 --exclude=manifest.in --no-same-owner
}

gdb() {
	pkgdesc="GDB pretty printers for Rust"
	depends="$pkgname=$pkgver-r$pkgrel gdb"

	amove usr/bin/rust-gdb*
	amove $_sharedir/etc/gdb_*.py
}

lldb() {
	pkgdesc="LLDB pretty printers for Rust"
	depends="$pkgname=$pkgver-r$pkgrel lldb py3-lldb"

	amove usr/bin/rust-lldb
	amove $_sharedir/etc/lldb_*.py
	amove usr/lib/rustlib/etc/lldb_commands
}

src() {
	pkgdesc="$pkgdesc (source code)"
	depends="$pkgname=$pkgver-r$pkgrel"
	license="$license OFL-1.1 GPL-3.0-or-later GPL-3.0-with-GCC-exception CC-BY-SA-3.0 LGPL-3.0"

	amove usr/src
	amove usr/lib/rustlib/src
	amove usr/lib/rustlib/rustc-src
}

cargo() {
	pkgdesc="The Rust package manager"
	license="Apache-2.0 MIT UNLICENSE"
	depends="$pkgname=$pkgver-r$pkgrel"
	# XXX: See comment on top-level provides=.
	provides="cargo-bootstrap=$pkgver-r$pkgrel"

	amove usr/bin/cargo
}

_cargo_bashcomp() {
	default_bashcomp
	
	pkgdesc="Bash completions for cargo"
	license="Apache-2.0 MIT"
	install_if="cargo=$pkgver-r$pkgrel bash-completion"
}

_cargo_zshcomp() {
	default_zshcomp
	
	pkgdesc="ZSH completions for cargo"
	license="Apache-2.0 MIT"
	depends=""
	install_if="cargo=$pkgver-r$pkgrel zsh"
}

_cargo_doc() {
	pkgdesc="The Rust package manager (documentation)"
	license="Apache-2.0 MIT"
	install_if="docs cargo=$pkgver-r$pkgrel"

	# XXX: This is hackish!
	cd "$pkgdir"/../$pkgname-doc
	_mv usr/share/man/man1/cargo* "$subpkgdir"/usr/share/man/man1/
}

_mv() {
	local dest; for dest; do true; done  # get last argument
	mkdir -p "$dest"
	mv "$@"
}

sha512sums="
7b043664eea007d17ff18574bcb1850ccdf2fa9d73acb50938eff906c590e4c94d03d9bedabf8fe615215c532922f7d63d762ad5da5add567b63ff257a2499b2  rust-1.79.0-x86_64-unknown-linux-musl.tar.gz
e33bc028f44742b4eab43ca5068123d5afa458594366f49ac5ac3ba3748a1852fe3e74ced360a66dcbac1b59f5a6b0ce7bdf53f8fc6e838f6b27be0e89c52f51  rustc-1.80.1-src.tar.gz
4ecf3fed9495f8813e11e1423e77d57033ca98909709a4a8585cdb8150276c83814609e7ce34aa83b7e463396b62f873b68b16fc31bf8f9132d63bcf8f708926  alpine-move-py-scripts-to-share.patch
811840cd7fce7c21ed287136716eec101b3ee95f284733f4144f7958f246699879840b5530b1a4e4c01c965cc2525970424aa8e35facb49ad882c73cbf5ffb5c  alpine-target.patch
20e34a6764dba6fe64d42292bbb3fcd953bc2ac40d15c35f09ba8ce9db82b0db53423a2abee341ee298e0eebf542071b3f2eddab4a9daa622ddf48bb4ff2b626  do-not-install-libunwind-source.patch
92916225c21742941aaf415d75d330fe2baf77a8226c076e862f4413068d5dee7b08c4b3182f69957ea9a51a0dcde145031565289015b6e3c31894fb396e4eb1  gcc-eh-libunwind.patch
b283d31cc8d6559aa639d44f776e97c2a1e0f23c717b6784e549861b881555bd467fa6023180866aae81a9a58c5f83e306940ee645f3c6733a1bdef6130036c9  install-template-shebang.patch
17f98e9e2384c509b08e7b59b1b0e8ff27c8b1f5e222a4e46a8170f5d0a8493a05a70d2e0de0f11bb7d99587de077c115976e50f69e76963983dd41e72152e86  musl-fix-linux_musl_base.patch
2d401a01d2c2db92624d672018342907a41aa4a3842708c0a2ab694af0396d568aca4835d1075f244d77c0a4c45e67f893fd175fd97cd7f758090eba9972eba6  need-rpath.patch
b6bf7be0b2eb2d31b4d9979852d5ec3ebc05d005b82e2f6b02394da6c43502729d32086ec2ffaf42f1006838ea5c2898b82a4172f9053fe08e978adcb711d5fa  need-ssp_nonshared.patch
90b42eb8c1e395e141f4372cdf1ed8cc59c153b3a219e7f79f7112c571407c1de38ffb306df14b1b9973334c8b95ce0c5e0339ab80024831fb4df8f5a3623bba  9950-alpine-arm-target-linker.patch
c31fdfe8a9b3411576c75da46645cf0465b9053000a2ab49cf9b2f2733f679d6d33acbf236d67a20e14935d094a685453b7f1840180249f39d610fd0902c3125  check-rustc
"
